/**
 * Gestion de places de parking API
 * API pour gérer les places de parking
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.RestBookParkingSpotRequest
import io.swagger.client.models.RestNewParking
import io.swagger.client.models.RestParking
import io.swagger.client.models.RestParkingSpot
import io.swagger.client.models.RestParkings

import io.swagger.client.infrastructure.*

class DefaultApi(basePath: kotlin.String = "http://localhost:8080/api/v1") : ApiClient(basePath) {

    /**
     * Récupérer la liste de tous les parkings
     * 
     * @return kotlin.Array<RestParkings>
     */
    @Suppress("UNCHECKED_CAST")
    fun parkingsGet(): kotlin.Array<RestParkings> {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/parkings"
        )
        val response = request<kotlin.Array<RestParkings>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<RestParkings>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Récupérer les détails d&#x27;un parking spécifique
     * 
     * @param id Identifiant du parking à récupérer 
     * @return RestParking
     */
    @Suppress("UNCHECKED_CAST")
    fun parkingsIdGet(id: kotlin.String): RestParking {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/parkings/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<RestParking>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as RestParking
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Libérer une place de parking
     * 
     * @param id Identifiant du parking à mettre à jour 
     * @param spotId Numéro de la place à mettre à jour 
     * @return void
     */
    fun parkingsIdSpotsSpotIdDelete(id: kotlin.String, spotId: kotlin.String): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/parkings/{id}/spots/{spotId}".replace("{" + "id" + "}", "$id").replace("{" + "spotId" + "}", "$spotId")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Récupérer les détails d&#x27;une place de parking spécifique
     * 
     * @param id Identifiant du parking à mettre à jour 
     * @param spotId Numéro de la place à mettre à jour 
     * @return RestParkingSpot
     */
    @Suppress("UNCHECKED_CAST")
    fun parkingsIdSpotsSpotIdGet(id: kotlin.String, spotId: kotlin.String): RestParkingSpot {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/parkings/{id}/spots/{spotId}".replace("{" + "id" + "}", "$id").replace("{" + "spotId" + "}", "$spotId")
        )
        val response = request<RestParkingSpot>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as RestParkingSpot
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Mettre à jour le statut d&#x27;une place de parking
     * 
     * @param body  
     * @param id Identifiant du parking à mettre à jour 
     * @param spotId Numéro de la place à mettre à jour 
     * @return void
     */
    fun parkingsIdSpotsSpotIdPut(body: RestBookParkingSpotRequest, id: kotlin.String, spotId: kotlin.String): Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/parkings/{id}/spots/{spotId}".replace("{" + "id" + "}", "$id").replace("{" + "spotId" + "}", "$spotId")
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Créer un nouveau parking
     * 
     * @param body  
     * @return void
     */
    fun parkingsPost(body: RestNewParking): String {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/parkings"
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> response.headers["Location"]?.first()?.split("/")?.last() ?: ""
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
